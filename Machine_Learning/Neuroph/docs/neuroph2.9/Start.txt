Java Machine Learning Frameworks
 Encog (Multicore and GPU powered)
	 http://www.heatonresearch.com/encog/
 Neuroph(Lightweight and easy to use)
 	http://neuroph.sourceforge.net/index.html
        http://neuroph.sourceforge.net/documentation.html

Neural Netwrok(NN) Steps
------------------------
1. Create Perceptron network
2. Create training set
3. Train network
4. Test trained network 
5. Save tested network
6. Use tested network for future data

We can implement above 1-5 steps using Java Neuroph Studio or Java neuroph library.


NN Types(org.neuroph.nnet)
---------------------------
ADALINE("Adaline")
PERCEPTRON("Perceptron")
MULTI_LAYER_PERCEPTRON("Multi Layer Perceptron")
HOPFIELD("Hopfield")
KOHONEN("Kohonen")
NEURO_FUZZY_REASONER("Neuro Fuzzy Reasoner")
SUPERVISED_HEBBIAN_NET("Supervised Hebbian network")
UNSUPERVISED_HEBBIAN_NET("Unsupervised Hebbian network")
COMPETITIVE("Competitive")
MAXNET("Maxnet")
INSTAR("Instar")
OUTSTAR("Outstar")
RBF_NETWORK("RBF Network")
BAM("BAM")
BOLTZMAN("Boltzman")
COUNTERPROPAGATION("CounterPropagation")
INSTAR_OUTSTAR("InstarOutstar")
PCA_NETWORK("PCANetwork")
RECOMMENDER("Recommender")

Neuron Types(org.neuroph.nnet.comp)
-----------------------------------
ThresholdNeuron
CompetitiveNeuron
DelayedNeuron
InputNeuron
InputOutputNeuron
ThresholdNeuron

Transform Funtions(org.neuroph.util)
------------------------------------
A transfer/activation function, which takes the weighted sum as input and calculates the output
of the neuron using a simple step function.
If the weighted sum is greater then zero, the function outputs 1; otherwise, it outputs 0.

LINEAR("Linear")
RAMP("Ramp")
STEP("Step")
SIGMOID("Sigmoid")
TANH("Tanh")
GAUSSIAN("Gaussian")
TRAPEZOID("Trapezoid")
SGN("Sgn")
SIN("Sin")
LOG("Log")

Learning Types(org.neuroph.core.learning)
-----------------------------------------
IterativeLearning
SupervisedLearning
UnsupervisedLearning

Derived types:
BackPropagation
SupervisedHebbianLearning
UnsupervisedHebbianLearning
etc..etc..












